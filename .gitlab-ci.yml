image: mcr.microsoft.com/dotnet/sdk:3.1

stages:
  - build
  - test
  - publish
  - test-templates
  - deploy

build Solution:
  stage: build
  script:
    - 'dotnet build RobSharper.Ros.IntegROS.sln'
  tags:
    - docker-executor


.test:
  stage: test
  script:
    - 'cd $PROJECT_NAME'
    - 'dotnet test --logger junit /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/'
  coverage: '/Total\s+\|\s+(\d{0,2}\.\d{1,2}%)/'
  artifacts:
    paths:
      - '$PROJECT_NAME/TestResults'
    reports:
      junit: '$PROJECT_NAME/TestResults/TestResults.xml'
      cobertura: '$PROJECT_NAME/TestResults/coverage.cobertura.xml'
  tags:
    - docker-executor


test IntegROS:
  extends: .test
  variables:
    PROJECT_NAME: 'RobSharper.Ros.IntegROS.Tests'
    
test Expectations:
  extends: .test
  variables:
    PROJECT_NAME: 'RobSharper.Ros.IntegROS.Tests.Expectations'

run examples TurtleSim:
  extends: .test
  variables:
    PROJECT_NAME: 'Examples.TurtleSimTests'

run examples Fibonacci Action:
  extends: .test
  variables:
    PROJECT_NAME: 'Examples.FibonacciActionTests'


Coverage Report:
  stage: publish
  before_script:
    - 'dotnet tool install dotnet-reportgenerator-globaltool --tool-path dotnet-tools'
  script:
    - 'dotnet-tools/reportgenerator -reports:*/TestResults/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html'
  artifacts:
    paths:
      - 'coverage-report'
  tags:
    - docker-executor

# Create a versioned NuGet package
# This task is only executed for the branches develop and master as well as version tags
nuget-pack:
  stage: publish
  #only:
    #- develop
    #- master
    #- /^v.*$/
  script:
    - 'export X_CI_VERSION=$(git describe | cut -c 2-)'
    - 'echo Publishing version $X_CI_VERSION'
    - 'cd RobSharper.Ros.IntegROS'
    - 'dotnet pack -c Release -o ../nuget/ -p:Version=$X_CI_VERSION -p:SymbolPackageFormat=snupkg --include-symbols'
  artifacts:
    paths:
      - 'nuget'
      - 'RobSharper.Ros.IntegROS/bin/Release/'
  tags:
    - docker-executor


templates pack:
  stage: publish
  script:
    - 'export X_CI_VERSION=$(git describe | cut -c 2-)'
    - 'echo Publishing templates version $X_CI_VERSION'
    - 'dotnet pack RobSharper.Ros.IntegROS.ProjectTemplates.sln -c Release -o ./nuget/ -p:Version=$X_CI_VERSION'
  artifacts:
    paths:
      - 'nuget'
  tags:
    - docker-executor


template 3.1 test:
  stage: test-templates
  image: mcr.microsoft.com/dotnet/sdk:3.1
  script:
    - 'export X_CI_VERSION=$(git describe | cut -c 2-)'
    - 'echo Installing templates version $X_CI_VERSION'
    - 'dotnet new -i ./nuget/RobSharper.Ros.IntegROS.ProjectTemplates.3.1.$X_CI_VERSION.nupkg'
    - 'mkdir ProjectTemplateTest'
    - 'cd ProjectTemplateTest'
    - 'dotnet new integros --no-restore'
    - 'dotnet add package RobSharper.Ros.IntegROS --version $X_CI_VERSION --no-restore'
    - 'dotnet restore --configfile ../ProjectTemplates/IntegrationTests.NuGet.config'
    - 'dotnet build --no-restore'
    - 'dotnet test --no-build --verbosity normal'
  tags:
    - docker-executor

template 2.1 test:
  stage: test-templates
  image: mcr.microsoft.com/dotnet/sdk:2.1
  script:
    - 'export X_CI_VERSION=$(git describe | cut -c 2-)'
    - 'echo Installing templates version $X_CI_VERSION'
    - 'dotnet new -i ./nuget/RobSharper.Ros.IntegROS.ProjectTemplates.3.1.$X_CI_VERSION.nupkg'
    - 'mkdir ProjectTemplateTest'
    - 'cd ProjectTemplateTest'
    - 'dotnet new integros --framework netcoreapp2.1 --no-restore'
    - 'dotnet add package RobSharper.Ros.IntegROS --version $X_CI_VERSION --no-restore'
    - 'dotnet restore --configfile ../ProjectTemplates/IntegrationTests.NuGet.config'
    - 'dotnet build --no-restore'
    - 'dotnet test --no-build --verbosity normal'
  tags:
    - docker-executor

template 5.0 test:
  stage: test-templates
  image: mcr.microsoft.com/dotnet/sdk:5.0
  script:
    - 'export X_CI_VERSION=$(git describe | cut -c 2-)'
    - 'echo Installing templates version $X_CI_VERSION'
    - 'dotnet new -i ./nuget/RobSharper.Ros.IntegROS.ProjectTemplates.3.1.$X_CI_VERSION.nupkg'
    - 'mkdir ProjectTemplateTest'
    - 'cd ProjectTemplateTest'
    - 'dotnet new integros --framework netcoreapp2.1 --no-restore'
    - 'dotnet add package RobSharper.Ros.IntegROS --version $X_CI_VERSION --no-restore'
    - 'dotnet restore --configfile ../ProjectTemplates/IntegrationTests.NuGet.config'
    - 'dotnet build --no-restore'
    - 'dotnet test --no-build --verbosity normal'
  tags:
    - docker-executor



# Deploy to JR BaGet server
# This is done for all pushes of version tags (v*) automatically
# Pushes to the master branch and web pipeline triggers must be deployed manually
.baget_base:
  stage: deploy
  dependencies:
    - nuget-pack
  variables:
    GIT_STRATEGY: none
  environment:
    name: JR BaGet
    url: https://robotics-bage.joanneum.at/
  script:
    - 'cd nuget'
    - 'dotnet nuget push *.nupkg -s $JR_BAGET_URL -k $JR_BAGET_API_KEY'
  tags:
    - docker-executor

baget auto:
  extends: .baget_base
  only:
    - /^v.*$/
  except:
    - web
    - schedules

baget manual:
  extends: .baget_base
  only:
    - develop
    - master
  when: manual


# Deploy to NuGet.org
# This task has to be triggered manually
#nuget.org:
#  stage: deploy
#  dependencies:
#    - nuget-pack
#  variables:
#    GIT_STRATEGY: none
#  environment:
#    name: NuGet.org
#    url: https://www.nuget.org/
#  only:
#    - master
#    - /^v.*$/
#  script:
#    - 'cd nuget'
#    - 'dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json -k $NUGET_ORG_API_KEY'
#  tags:
#    - docker-executor
#  when: manual
