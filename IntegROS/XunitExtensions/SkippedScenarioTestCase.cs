using System;
using System.ComponentModel;
using IntegROS.XunitExtensions.ScenarioDiscovery;
using Xunit.Abstractions;
using Xunit.Sdk;

namespace IntegROS.XunitExtensions
{
    /// <summary>
    /// Represents a test case that had a valid data row, but the data row was generated by a data attribute with the skip property set.
    /// </summary>
    /// <remarks>This class is only ever used if the discoverer is pre-enumerating theories and the data row is serializable.</remarks>
    public class SkippedScenarioTestCase : ScenarioTestCaseBase
    {
        private string _skipReason;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Obsolete("Called by the de-serializer; should only be called by deriving classes for de-serialization purposes")]
        public SkippedScenarioTestCase() : base()
        {
        }

        public SkippedScenarioTestCase(IMessageSink diagnosticMessageSink,
            TestMethodDisplay defaultMethodDisplay,
            TestMethodDisplayOptions defaultMethodDisplayOptions,
            ITestMethod testMethod,
            IScenarioIdentifier scenarioIdentifier,
            string skipReason,
            object[] testMethodArguments = null) :
            base(diagnosticMessageSink, defaultMethodDisplay, defaultMethodDisplayOptions, testMethod,
                scenarioIdentifier, testMethodArguments)
        {
            _skipReason = skipReason;
        }

        /// <inheritdoc/>
        public override void Deserialize(IXunitSerializationInfo data)
        {
            _skipReason = data.GetValue<string>("SkipReason");
            
            base.Deserialize(data);
        }

        /// <inheritdoc/>
        public override void Serialize(IXunitSerializationInfo data)
        {
            base.Serialize(data);

            data.AddValue("SkipReason", _skipReason);
        }

        /// <inheritdoc/>
        protected override string GetSkipReason(IAttributeInfo factAttribute)
        {
            return _skipReason;
        }
    }
}